accessible: 2018-11-12 00:00:00/
author: Matthias MÃ¶ller
context: |-
    Click the button below to show/hide the task description

    .. raw:: html

       <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#description">Description</button>

    .. container:: collapse
       :name: description

       This is a generic C++ demo tasks for the INGInious platform. 

       It uses three sub-problems to let the student

       *   fill in the C++ source code (Question 1), 
       *   choose a C++ standard (Question 2), and
       *   provide additional command line arguments (Question 3).

       **C++ Source Code**

       This demo task assumes that the entire source code is given in
       a single file and provides the ``main`` function that is called
       when the program is executed. The user-provided source code is
       parsed to ensure that the ``main`` function has one of the
       following signatures:

       *   ``int main()``
       *   ``int main(int argc, char* argv[])``
       *   ``int main(int argc, char** argv)``

       All other signatures will lead to an error message. Multi-line implementations are possible, e.g.,

       .. code:: cpp

          int
          
          main ( 
                 int argc ,
                 char** argv
               )

       *Technical details*:

       The user-provided source code is substituted into the file
       ``student/student_code.cxx``, which is auto-generated by the
       ``run`` script from the template file
       ``student/student_code.cxx.tpl``.  To enable support for all of
       the above variants of the ``main`` function, the user-provided
       ``main`` function is renamed to ``__main__`` and called from
       the ``test_student_code`` function that is provided in the file
       ``student/bridge.cxx``, which is itself auto-generated from the
       template file ``student/bridge.cxx.tpl``. This way, the
       ``test_student_code()`` function has a unique interface and the
       possibly provided command line arguments are pre-processed
       internally; cf. ``student/bridge.cxx`` file.

       **C++ Standards**

       The choice of the C++ standard is realized as multiple-choice
       problem that accepts exactly one answer. The user's choice is
       taken into account in the file ``student/config/Makefile.inc``,
       which is auto-generated from the file
       ``student/config/Makefile.inc.tpl``:

       .. code:: makefile

          # C++11 (student_cxx_standard multiple choice: 0)
          CXXFLAGS_EXTRA_0 = -std=gnu++11
          LDFLAGS_EXTRA_0  = -std=gnu++11

          # C++14 (student_cxx_standard multiple choice: 1)
          CXXFLAGS_EXTRA_1 = -std=gnu++14
          LDFLAGS_EXTRA_1  = -std=gnu++14

          ...

          CXXFLAGS_EXTRA   = -O3 -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-variadic-macros -Wvla -Wall -Wextra -Werror ${CXXFLAGS_EXTRA_@@student_cxx_standard@@}
          LDFLAGS_EXTRA    = -O3 -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-variadic-macros -Wvla -Wall -Wextra -Werror ${LDFLAGS_EXTRA_@@student_cxx_standard@@}

       In order to add further configurations, add a new choice to the
       ``task.yaml`` file and provide variables ``CXXFLAGS_EXTRA_X``
       and ``LDFLAGS_EXTRA_X`` for the newly added choice ``X``.

       The compiler is intentionally called with very pedantic
       settings to report warnings as errors. For some of these
       warnings, the ``run`` script provides additional information,
       e.g., the error triggered by the compiler flag
       ``-Werror=reorder`` is translated into the feedback string

       *"Your code misses a return statement in line ... for a function that was declared to return a non-void type"*

       Additional feedback strings can be integrated into the ``run``
       script. If INGInious' `highlight plugin
       <https://github.com/UCL-INGI/INGInious-highlight-plugin>`_ is
       installed and activated, the line of the first error is
       highlighted red.

       **Command Line Arguments**

       Command line arguments can be passed by providing them in
       quotes and separated by commas in Question 3.

environment: cpp-gcc8
evaluate: last
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '1. Getting started!'
network_grading: false
order: 0
problems:
    student_code:
        language: cpp
        type: code
        name: 'Getting started'
        default: |
            #include <iostream>

            struct Test
            {
            private:
              int i;
              double d;

            public:
              // Change the order of initialization to see the special treatment
              // of the compiler warning triggered by [-Werror=reorder]
              Test()
              : i(0), d(0.0)
              {}
            };

            // Comment out the return statement to see the special treatment
            // of the compiler warning triggered by [-Werror=return-type]
            int my_exit(){
              return 0;
            }

            int main(int argc, char* argv[]){

              if (argc>1)
                for (auto i=1; i<argc; i++)
                  std::cout << "Argument #" << i << " : " << argv[i] << std::endl;
              else
                std::cout << "Generic output to std::cout!" << std::endl;

              std::cerr << "Generic output to std::cerr!" << std::endl;

              return my_exit();
            }
        header: |-
    student_cxx_standard:
        choices:
        -   text: C++11
            valid: true
            feedback: Your code has been compiled using the C++11 standard
        -   text: C++14
            valid: true
            feedback: Your code has been compiled using the C++14 standard
        -   text: C++17
            valid: true
            feedback: Your code has been compiled using the C++17 standard
        -   text: C++2a
            valid: true
            feedback: Your code has been compiled using the C++2a (draft) standard
        type: multiple_choice
        header: Select the C++ standard that should be used to compile your code
        limit: 0
        name: C++ Standard
    student_argv:
        name: Command Line Argument
        type: code_single_line
        header: |-
            Specify the command line arguments that should be passed to your  program when it is run. Arguments must be given in quotes and separated by commas. Leave this filed empty if you do not want to specify command line arguments.

            *Example:* ``"1","int","arg=2"`` is interpreted as three arguments ``1``, ``int``, and ``arg=2``.
        default: ''
        optional: 'on'

#    student_upload:
#        header: |-
#           Upload a file that should be used by your program when it is run. The filename must end with extension ``dat`` and the file size must not exceed 10MB. Leave this field empty if you do not want to upload any file.
#
#           *Example:* Upload the file ``text.dat`` with single-line content ``Hello World!``.
#        max_size: 10485760
#        allowed_exts:
#        - .dat
#        type: file
#        name: File upload
#        optional: 'on'

stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        name: Timeout
        visible: true
        type: 1
        description: Your code exceeds the maximum allowed time.
        id: timeout
    '1':
        id: sigsegv
        description: Your code produced a segmentation fault.
        name: Segmentation Fault
        type: 1
        visible: true
    '2':
        id: not_compile
        description: You code does not compile.
        name: Not compile
        visible: true
        type: 1
    '3':
        id: memory
        name: Memory Exceeded
        type: 1
        description: Your code exceeded the maximal admissible amount of memory.
        visible: true
    '4':
        id: sigfpe
        description: Your code produced a floating point exception.
        visible: true
        name: Floating Point Exception
        type: 1
    '5':
        name: Double free
        type: 1
        description: Your code produced a double free.
        visible: true
        id: double_free
    '6':
        name: Banned functions
        id: banned_funcs
        description: You use some banned functions.
        visible: true
        type: 1
    '7':
        type: 2
        description: This is a demonstration task
        visible: true
        name: Demo
        id: ''
    '8':
        visible: true
        type: 2
        name: C++
        description: This is a C++ programming task
        id: ''
    '9':
        visible: true
        description: This task belongs to week 1
        type: 2
        name: Week 1
        id: ''
weight: 0.0
